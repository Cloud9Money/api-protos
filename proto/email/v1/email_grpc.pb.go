// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: proto/email/v1/email.proto

package emailv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmailService_SendEmail_FullMethodName                   = "/email.v1.EmailService/SendEmail"
	EmailService_SendTemplateEmail_FullMethodName           = "/email.v1.EmailService/SendTemplateEmail"
	EmailService_SendVerificationEmail_FullMethodName       = "/email.v1.EmailService/SendVerificationEmail"
	EmailService_SendPasswordResetEmail_FullMethodName      = "/email.v1.EmailService/SendPasswordResetEmail"
	EmailService_SendWelcomeEmail_FullMethodName            = "/email.v1.EmailService/SendWelcomeEmail"
	EmailService_SendTransactionNotification_FullMethodName = "/email.v1.EmailService/SendTransactionNotification"
	EmailService_SendBulkEmail_FullMethodName               = "/email.v1.EmailService/SendBulkEmail"
	EmailService_GetEmailStatus_FullMethodName              = "/email.v1.EmailService/GetEmailStatus"
	EmailService_ListEmails_FullMethodName                  = "/email.v1.EmailService/ListEmails"
)

// EmailServiceClient is the client API for EmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EmailService provides email sending capabilities
type EmailServiceClient interface {
	// SendEmail sends a standard email with HTML and text content
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	// SendTemplateEmail sends an email using a predefined template
	SendTemplateEmail(ctx context.Context, in *SendTemplateEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	// SendVerificationEmail sends a verification email with token
	SendVerificationEmail(ctx context.Context, in *SendVerificationEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	// SendPasswordResetEmail sends a password reset email
	SendPasswordResetEmail(ctx context.Context, in *SendPasswordResetEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	// SendWelcomeEmail sends a welcome email to new users
	SendWelcomeEmail(ctx context.Context, in *SendWelcomeEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	// SendTransactionNotification sends transaction-related emails
	SendTransactionNotification(ctx context.Context, in *SendTransactionNotificationRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	// SendBulkEmail sends multiple emails in batch
	SendBulkEmail(ctx context.Context, in *SendBulkEmailRequest, opts ...grpc.CallOption) (*SendBulkEmailResponse, error)
	// GetEmailStatus retrieves the status of a sent email
	GetEmailStatus(ctx context.Context, in *GetEmailStatusRequest, opts ...grpc.CallOption) (*EmailStatus, error)
	// ListEmails lists sent emails with filtering
	ListEmails(ctx context.Context, in *ListEmailsRequest, opts ...grpc.CallOption) (*ListEmailsResponse, error)
}

type emailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailServiceClient(cc grpc.ClientConnInterface) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendTemplateEmail(ctx context.Context, in *SendTemplateEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_SendTemplateEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendVerificationEmail(ctx context.Context, in *SendVerificationEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_SendVerificationEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendPasswordResetEmail(ctx context.Context, in *SendPasswordResetEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_SendPasswordResetEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendWelcomeEmail(ctx context.Context, in *SendWelcomeEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_SendWelcomeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendTransactionNotification(ctx context.Context, in *SendTransactionNotificationRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_SendTransactionNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendBulkEmail(ctx context.Context, in *SendBulkEmailRequest, opts ...grpc.CallOption) (*SendBulkEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBulkEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_SendBulkEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetEmailStatus(ctx context.Context, in *GetEmailStatusRequest, opts ...grpc.CallOption) (*EmailStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailStatus)
	err := c.cc.Invoke(ctx, EmailService_GetEmailStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) ListEmails(ctx context.Context, in *ListEmailsRequest, opts ...grpc.CallOption) (*ListEmailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmailsResponse)
	err := c.cc.Invoke(ctx, EmailService_ListEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailServiceServer is the server API for EmailService service.
// All implementations must embed UnimplementedEmailServiceServer
// for forward compatibility.
//
// EmailService provides email sending capabilities
type EmailServiceServer interface {
	// SendEmail sends a standard email with HTML and text content
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
	// SendTemplateEmail sends an email using a predefined template
	SendTemplateEmail(context.Context, *SendTemplateEmailRequest) (*SendEmailResponse, error)
	// SendVerificationEmail sends a verification email with token
	SendVerificationEmail(context.Context, *SendVerificationEmailRequest) (*SendEmailResponse, error)
	// SendPasswordResetEmail sends a password reset email
	SendPasswordResetEmail(context.Context, *SendPasswordResetEmailRequest) (*SendEmailResponse, error)
	// SendWelcomeEmail sends a welcome email to new users
	SendWelcomeEmail(context.Context, *SendWelcomeEmailRequest) (*SendEmailResponse, error)
	// SendTransactionNotification sends transaction-related emails
	SendTransactionNotification(context.Context, *SendTransactionNotificationRequest) (*SendEmailResponse, error)
	// SendBulkEmail sends multiple emails in batch
	SendBulkEmail(context.Context, *SendBulkEmailRequest) (*SendBulkEmailResponse, error)
	// GetEmailStatus retrieves the status of a sent email
	GetEmailStatus(context.Context, *GetEmailStatusRequest) (*EmailStatus, error)
	// ListEmails lists sent emails with filtering
	ListEmails(context.Context, *ListEmailsRequest) (*ListEmailsResponse, error)
	mustEmbedUnimplementedEmailServiceServer()
}

// UnimplementedEmailServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailServiceServer struct{}

func (UnimplementedEmailServiceServer) SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedEmailServiceServer) SendTemplateEmail(context.Context, *SendTemplateEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTemplateEmail not implemented")
}
func (UnimplementedEmailServiceServer) SendVerificationEmail(context.Context, *SendVerificationEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationEmail not implemented")
}
func (UnimplementedEmailServiceServer) SendPasswordResetEmail(context.Context, *SendPasswordResetEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordResetEmail not implemented")
}
func (UnimplementedEmailServiceServer) SendWelcomeEmail(context.Context, *SendWelcomeEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWelcomeEmail not implemented")
}
func (UnimplementedEmailServiceServer) SendTransactionNotification(context.Context, *SendTransactionNotificationRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransactionNotification not implemented")
}
func (UnimplementedEmailServiceServer) SendBulkEmail(context.Context, *SendBulkEmailRequest) (*SendBulkEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBulkEmail not implemented")
}
func (UnimplementedEmailServiceServer) GetEmailStatus(context.Context, *GetEmailStatusRequest) (*EmailStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailStatus not implemented")
}
func (UnimplementedEmailServiceServer) ListEmails(context.Context, *ListEmailsRequest) (*ListEmailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmails not implemented")
}
func (UnimplementedEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {}
func (UnimplementedEmailServiceServer) testEmbeddedByValue()                      {}

// UnsafeEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServiceServer will
// result in compilation errors.
type UnsafeEmailServiceServer interface {
	mustEmbedUnimplementedEmailServiceServer()
}

func RegisterEmailServiceServer(s grpc.ServiceRegistrar, srv EmailServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmailServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmailService_ServiceDesc, srv)
}

func _EmailService_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendTemplateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTemplateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendTemplateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendTemplateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendTemplateEmail(ctx, req.(*SendTemplateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendVerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerificationEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendVerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendVerificationEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendVerificationEmail(ctx, req.(*SendVerificationEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendPasswordResetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPasswordResetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendPasswordResetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendPasswordResetEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendPasswordResetEmail(ctx, req.(*SendPasswordResetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendWelcomeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWelcomeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendWelcomeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendWelcomeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendWelcomeEmail(ctx, req.(*SendWelcomeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendTransactionNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendTransactionNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendTransactionNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendTransactionNotification(ctx, req.(*SendTransactionNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendBulkEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBulkEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendBulkEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendBulkEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendBulkEmail(ctx, req.(*SendBulkEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetEmailStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetEmailStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_GetEmailStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetEmailStatus(ctx, req.(*GetEmailStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_ListEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).ListEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_ListEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).ListEmails(ctx, req.(*ListEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailService_ServiceDesc is the grpc.ServiceDesc for EmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "email.v1.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _EmailService_SendEmail_Handler,
		},
		{
			MethodName: "SendTemplateEmail",
			Handler:    _EmailService_SendTemplateEmail_Handler,
		},
		{
			MethodName: "SendVerificationEmail",
			Handler:    _EmailService_SendVerificationEmail_Handler,
		},
		{
			MethodName: "SendPasswordResetEmail",
			Handler:    _EmailService_SendPasswordResetEmail_Handler,
		},
		{
			MethodName: "SendWelcomeEmail",
			Handler:    _EmailService_SendWelcomeEmail_Handler,
		},
		{
			MethodName: "SendTransactionNotification",
			Handler:    _EmailService_SendTransactionNotification_Handler,
		},
		{
			MethodName: "SendBulkEmail",
			Handler:    _EmailService_SendBulkEmail_Handler,
		},
		{
			MethodName: "GetEmailStatus",
			Handler:    _EmailService_GetEmailStatus_Handler,
		},
		{
			MethodName: "ListEmails",
			Handler:    _EmailService_ListEmails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/email/v1/email.proto",
}
