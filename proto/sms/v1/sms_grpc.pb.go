// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: proto/sms/v1/sms.proto

package smsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SMSService_SendSMS_FullMethodName              = "/sms.v1.SMSService/SendSMS"
	SMSService_SendOTP_FullMethodName              = "/sms.v1.SMSService/SendOTP"
	SMSService_SendTransactionAlert_FullMethodName = "/sms.v1.SMSService/SendTransactionAlert"
	SMSService_SendBulkSMS_FullMethodName          = "/sms.v1.SMSService/SendBulkSMS"
	SMSService_VerifyOTP_FullMethodName            = "/sms.v1.SMSService/VerifyOTP"
	SMSService_SendTemplateSMS_FullMethodName      = "/sms.v1.SMSService/SendTemplateSMS"
	SMSService_GetSMSStatus_FullMethodName         = "/sms.v1.SMSService/GetSMSStatus"
	SMSService_ListSMS_FullMethodName              = "/sms.v1.SMSService/ListSMS"
)

// SMSServiceClient is the client API for SMSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SMSService provides SMS sending capabilities
type SMSServiceClient interface {
	// SendSMS sends a standard SMS message
	SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*SendSMSResponse, error)
	// SendOTP sends a one-time password via SMS
	SendOTP(ctx context.Context, in *SendOTPRequest, opts ...grpc.CallOption) (*SendSMSResponse, error)
	// SendTransactionAlert sends transaction notification via SMS
	SendTransactionAlert(ctx context.Context, in *SendTransactionAlertRequest, opts ...grpc.CallOption) (*SendSMSResponse, error)
	// SendBulkSMS sends SMS to multiple recipients
	SendBulkSMS(ctx context.Context, in *SendBulkSMSRequest, opts ...grpc.CallOption) (*SendBulkSMSResponse, error)
	// VerifyOTP verifies an OTP code
	VerifyOTP(ctx context.Context, in *VerifyOTPRequest, opts ...grpc.CallOption) (*VerifyOTPResponse, error)
	// SendTemplateSMS sends an SMS using a predefined template
	SendTemplateSMS(ctx context.Context, in *SendTemplateSMSRequest, opts ...grpc.CallOption) (*SendSMSResponse, error)
	// GetSMSStatus retrieves the status of a sent SMS
	GetSMSStatus(ctx context.Context, in *GetSMSStatusRequest, opts ...grpc.CallOption) (*SMSStatus, error)
	// ListSMS lists sent SMS messages with filtering
	ListSMS(ctx context.Context, in *ListSMSRequest, opts ...grpc.CallOption) (*ListSMSResponse, error)
}

type sMSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSMSServiceClient(cc grpc.ClientConnInterface) SMSServiceClient {
	return &sMSServiceClient{cc}
}

func (c *sMSServiceClient) SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*SendSMSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSMSResponse)
	err := c.cc.Invoke(ctx, SMSService_SendSMS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSServiceClient) SendOTP(ctx context.Context, in *SendOTPRequest, opts ...grpc.CallOption) (*SendSMSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSMSResponse)
	err := c.cc.Invoke(ctx, SMSService_SendOTP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSServiceClient) SendTransactionAlert(ctx context.Context, in *SendTransactionAlertRequest, opts ...grpc.CallOption) (*SendSMSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSMSResponse)
	err := c.cc.Invoke(ctx, SMSService_SendTransactionAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSServiceClient) SendBulkSMS(ctx context.Context, in *SendBulkSMSRequest, opts ...grpc.CallOption) (*SendBulkSMSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBulkSMSResponse)
	err := c.cc.Invoke(ctx, SMSService_SendBulkSMS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSServiceClient) VerifyOTP(ctx context.Context, in *VerifyOTPRequest, opts ...grpc.CallOption) (*VerifyOTPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyOTPResponse)
	err := c.cc.Invoke(ctx, SMSService_VerifyOTP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSServiceClient) SendTemplateSMS(ctx context.Context, in *SendTemplateSMSRequest, opts ...grpc.CallOption) (*SendSMSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSMSResponse)
	err := c.cc.Invoke(ctx, SMSService_SendTemplateSMS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSServiceClient) GetSMSStatus(ctx context.Context, in *GetSMSStatusRequest, opts ...grpc.CallOption) (*SMSStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SMSStatus)
	err := c.cc.Invoke(ctx, SMSService_GetSMSStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSServiceClient) ListSMS(ctx context.Context, in *ListSMSRequest, opts ...grpc.CallOption) (*ListSMSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSMSResponse)
	err := c.cc.Invoke(ctx, SMSService_ListSMS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SMSServiceServer is the server API for SMSService service.
// All implementations must embed UnimplementedSMSServiceServer
// for forward compatibility.
//
// SMSService provides SMS sending capabilities
type SMSServiceServer interface {
	// SendSMS sends a standard SMS message
	SendSMS(context.Context, *SendSMSRequest) (*SendSMSResponse, error)
	// SendOTP sends a one-time password via SMS
	SendOTP(context.Context, *SendOTPRequest) (*SendSMSResponse, error)
	// SendTransactionAlert sends transaction notification via SMS
	SendTransactionAlert(context.Context, *SendTransactionAlertRequest) (*SendSMSResponse, error)
	// SendBulkSMS sends SMS to multiple recipients
	SendBulkSMS(context.Context, *SendBulkSMSRequest) (*SendBulkSMSResponse, error)
	// VerifyOTP verifies an OTP code
	VerifyOTP(context.Context, *VerifyOTPRequest) (*VerifyOTPResponse, error)
	// SendTemplateSMS sends an SMS using a predefined template
	SendTemplateSMS(context.Context, *SendTemplateSMSRequest) (*SendSMSResponse, error)
	// GetSMSStatus retrieves the status of a sent SMS
	GetSMSStatus(context.Context, *GetSMSStatusRequest) (*SMSStatus, error)
	// ListSMS lists sent SMS messages with filtering
	ListSMS(context.Context, *ListSMSRequest) (*ListSMSResponse, error)
	mustEmbedUnimplementedSMSServiceServer()
}

// UnimplementedSMSServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSMSServiceServer struct{}

func (UnimplementedSMSServiceServer) SendSMS(context.Context, *SendSMSRequest) (*SendSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSMS not implemented")
}
func (UnimplementedSMSServiceServer) SendOTP(context.Context, *SendOTPRequest) (*SendSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOTP not implemented")
}
func (UnimplementedSMSServiceServer) SendTransactionAlert(context.Context, *SendTransactionAlertRequest) (*SendSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransactionAlert not implemented")
}
func (UnimplementedSMSServiceServer) SendBulkSMS(context.Context, *SendBulkSMSRequest) (*SendBulkSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBulkSMS not implemented")
}
func (UnimplementedSMSServiceServer) VerifyOTP(context.Context, *VerifyOTPRequest) (*VerifyOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOTP not implemented")
}
func (UnimplementedSMSServiceServer) SendTemplateSMS(context.Context, *SendTemplateSMSRequest) (*SendSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTemplateSMS not implemented")
}
func (UnimplementedSMSServiceServer) GetSMSStatus(context.Context, *GetSMSStatusRequest) (*SMSStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSMSStatus not implemented")
}
func (UnimplementedSMSServiceServer) ListSMS(context.Context, *ListSMSRequest) (*ListSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSMS not implemented")
}
func (UnimplementedSMSServiceServer) mustEmbedUnimplementedSMSServiceServer() {}
func (UnimplementedSMSServiceServer) testEmbeddedByValue()                    {}

// UnsafeSMSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SMSServiceServer will
// result in compilation errors.
type UnsafeSMSServiceServer interface {
	mustEmbedUnimplementedSMSServiceServer()
}

func RegisterSMSServiceServer(s grpc.ServiceRegistrar, srv SMSServiceServer) {
	// If the following call pancis, it indicates UnimplementedSMSServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SMSService_ServiceDesc, srv)
}

func _SMSService_SendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServiceServer).SendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMSService_SendSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServiceServer).SendSMS(ctx, req.(*SendSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMSService_SendOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServiceServer).SendOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMSService_SendOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServiceServer).SendOTP(ctx, req.(*SendOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMSService_SendTransactionAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServiceServer).SendTransactionAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMSService_SendTransactionAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServiceServer).SendTransactionAlert(ctx, req.(*SendTransactionAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMSService_SendBulkSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBulkSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServiceServer).SendBulkSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMSService_SendBulkSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServiceServer).SendBulkSMS(ctx, req.(*SendBulkSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMSService_VerifyOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServiceServer).VerifyOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMSService_VerifyOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServiceServer).VerifyOTP(ctx, req.(*VerifyOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMSService_SendTemplateSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTemplateSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServiceServer).SendTemplateSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMSService_SendTemplateSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServiceServer).SendTemplateSMS(ctx, req.(*SendTemplateSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMSService_GetSMSStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSMSStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServiceServer).GetSMSStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMSService_GetSMSStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServiceServer).GetSMSStatus(ctx, req.(*GetSMSStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMSService_ListSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServiceServer).ListSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMSService_ListSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServiceServer).ListSMS(ctx, req.(*ListSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SMSService_ServiceDesc is the grpc.ServiceDesc for SMSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SMSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sms.v1.SMSService",
	HandlerType: (*SMSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSMS",
			Handler:    _SMSService_SendSMS_Handler,
		},
		{
			MethodName: "SendOTP",
			Handler:    _SMSService_SendOTP_Handler,
		},
		{
			MethodName: "SendTransactionAlert",
			Handler:    _SMSService_SendTransactionAlert_Handler,
		},
		{
			MethodName: "SendBulkSMS",
			Handler:    _SMSService_SendBulkSMS_Handler,
		},
		{
			MethodName: "VerifyOTP",
			Handler:    _SMSService_VerifyOTP_Handler,
		},
		{
			MethodName: "SendTemplateSMS",
			Handler:    _SMSService_SendTemplateSMS_Handler,
		},
		{
			MethodName: "GetSMSStatus",
			Handler:    _SMSService_GetSMSStatus_Handler,
		},
		{
			MethodName: "ListSMS",
			Handler:    _SMSService_ListSMS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sms/v1/sms.proto",
}
